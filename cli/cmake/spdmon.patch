diff --git a/include/spdmon/spdmon.hpp b/include/spdmon/spdmon.hpp
index 47b44f3..d5a23e6 100644
--- a/include/spdmon/spdmon.hpp
+++ b/include/spdmon/spdmon.hpp
@@ -17,16 +17,23 @@
 #include "spdlog/sinks/stdout_sinks.h"
 #include "spdlog/sinks/basic_file_sink.h"
 #include <spdlog/sinks/ansicolor_sink.h>
+#if !defined(SPDLOG_HEADER_ONLY) && (defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__))
+#include <spdlog/sinks/ansicolor_sink-inl.h>
+#endif
 
 /*
  * Check if system is Windows
 */
 #if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)
-#error Progress sink only work on Linux platform
+#include <windows.h>
+#include <stdio.h>
+#include <io.h>
+#define SPDMON_WIN
 #else
 #include <signal.h>
 #include <sys/ioctl.h>
 #include <unistd.h>
+#define SPDMON_UNIX
 #endif
 
 namespace spdmon
@@ -67,7 +74,7 @@ namespace spdmon
      * Bar symbols coded in unicode used for displaying spdmon
     */
     static const char *kBarSymsUnicode[] = {
-        " ", "\xE2\x96\x8F", "\xE2\x96\x8E", "\xE2\x96\x8D", "\xE2\x96\x8C", "\xE2\x96\x8B", "\xE2\x96\x8A", "\xE2\x96\x89",
+        " ", u8"\xE2\x96\x8F", "\xE2\x96\x8E", "\xE2\x96\x8D", "\xE2\x96\x8C", "\xE2\x96\x8B", "\xE2\x96\x8A", "\xE2\x96\x89",
         "\xE2\x96\x88"};
 
     /*
@@ -198,8 +205,8 @@ namespace spdmon
 
             if (total_ == 0)
             {
-                fmt::format_to(fmt::appender(buf), kNoTotalFmt, fmt::arg("desc", desc_),
-                               fmt::arg("n", n_),
+                fmt::format_to(fmt::appender(buf), mNoTotalFmt, fmt::arg("desc", desc_),
+                               fmt::arg("n", n_.load()),
                                fmt::arg("elapsed", elapsed),
                                fmt::arg("eol", kTermEol));
                 return;
@@ -213,9 +220,9 @@ namespace spdmon
 
             const float percent = frac * 100;
 
-            fmt::format_to(fmt::appender(buf), kLbarFmt, fmt::arg("desc", desc_),
+            fmt::format_to(fmt::appender(buf), mLbarFmt, fmt::arg("desc", desc_),
                           fmt::arg("frac", percent));
-            fmt::format_to(fmt::appender(right), kRbarFmt, fmt::arg("n", n_),
+            fmt::format_to(fmt::appender(right), mRbarFmt, fmt::arg("n", n_.load()),
                           fmt::arg("total", total_),
                           fmt::arg("elapsed", elapsed),
                           fmt::arg("remaining", remaining),
@@ -232,6 +239,24 @@ namespace spdmon
 
         virtual void ShowProgress(timepoint_t now = clock_t::now()) = 0;
 
+        void SetLbarFmt(const std::string & f)
+        {
+            std::lock_guard<std::mutex> lock(mutex_);
+            mLbarFmt = f;
+        }
+
+        void SetRbarFmt(const std::string & f)
+        {
+            std::lock_guard<std::mutex> lock(mutex_);
+            mRbarFmt = f;
+        }
+
+        void SetNoTotalFmt(const std::string & f)
+        {
+            std::lock_guard<std::mutex> lock(mutex_);
+            mNoTotalFmt = f;
+        }
+
     private:
         std::atomic<unsigned int> n_{0};
         unsigned int last_print_n_{0};
@@ -251,6 +276,10 @@ namespace spdmon
         const std::string kLbarFmt = "{desc}: {frac:3.0f}% |";
         const std::string kRbarFmt = "| {n}/{total} [{elapsed:%T} / {remaining:%T}]{eol}";
         const std::string kNoTotalFmt = "{desc}: {n} [{elapsed:%T}]{eol}";
+
+        std::string mLbarFmt = kLbarFmt;
+        std::string mRbarFmt = kRbarFmt;
+        std::string mNoTotalFmt = kNoTotalFmt;
     };
 
     /* Progress monitor writing directly to a file */
@@ -266,6 +295,13 @@ namespace spdmon
         {
             if (width_ == 0)
             {
+#if defined(SPDMON_WIN)
+                auto handle = (HANDLE)_get_osfhandle(_fileno(file_));
+                DWORD flags = 0;
+                GetConsoleMode(handle, &flags);
+                // Enable ANSI mode
+                SetConsoleMode(handle, flags | ENABLE_VIRTUAL_TERMINAL_PROCESSING);
+#endif
                 UpdateTermWidth();
             }
         }
@@ -277,12 +313,21 @@ namespace spdmon
 
         void UpdateTermWidth()
         {
+#if defined(SPDMON_WIN)
+            auto handle = (HANDLE)_get_osfhandle(_fileno(file_));
+            CONSOLE_SCREEN_BUFFER_INFO csbi = {};
+            if (GetConsoleScreenBufferInfo(handle, &csbi))
+            {
+                width_ = csbi.srWindow.Right - csbi.srWindow.Left + 1;
+            }
+#elif defined(SPDMON_UNIX)
             int fd = fileno(file_);
             struct winsize size;
             if (ioctl(fd, TIOCGWINSZ, &size) == 0)
             {
                 width_ = size.ws_col;
             }
+#endif
         }
 
         void ShowProgress(timepoint_t now = clock_t::now()) final
@@ -484,6 +529,7 @@ namespace spdmon
 
         static void InstallHandler()
         {
+#if defined(SPDMON_UNIX)
             struct sigaction sa;
             memset(&sa, 0, sizeof(sa));
             if (sigaction(SIGWINCH, nullptr, &sa))
@@ -501,6 +547,7 @@ namespace spdmon
             {
                 return; // failed
             }
+#endif
         }
 
         static void NotifyInstances()
@@ -528,6 +575,14 @@ namespace spdmon
         {
             if (log_sink::should_color())
             {
+#if defined(SPDMON_WIN)
+                SetConsoleOutputCP(65001);
+                auto handle = GetStdHandle(STD_OUTPUT_HANDLE);
+                DWORD flags = 0;
+                GetConsoleMode(handle, &flags);
+                // Enable ANSI mode
+                SetConsoleMode(handle, flags | ENABLE_VIRTUAL_TERMINAL_PROCESSING);
+#endif
                 UpdateTermWidth();
             }
         }
@@ -554,7 +609,10 @@ namespace spdmon
                 return;
             }
 
+            // Note: Windows does not have a good way to handle this
+#if defined(SPDMON_UNIX)
             if (CheckGotSigwinch())
+#endif
             {
                 UpdateTermWidth();
             }
@@ -592,6 +650,16 @@ namespace spdmon
 
         void UpdateTermWidth()
         {
+#if defined(SPDMON_WIN)
+            auto handle = GetStdHandle(STD_OUTPUT_HANDLE);
+            CONSOLE_SCREEN_BUFFER_INFO csbi = {};
+            if (GetConsoleScreenBufferInfo(handle, &csbi))
+            {
+                // std::lock_guard<mutex_t> lock(log_sink::mutex_);
+                std::lock_guard<mutex_t> lock(this->mutex_);
+                ncols_ = csbi.srWindow.Right - csbi.srWindow.Left + 1;
+            }
+#elif defined(SPDMON_UNIX)
             int fd = fileno(stdout);
             struct winsize size;
             if (ioctl(fd, TIOCGWINSZ, &size) == 0)
@@ -600,6 +668,7 @@ namespace spdmon
                 std::lock_guard<mutex_t> lock(this->mutex_);
                 ncols_ = size.ws_col;
             }
+#endif
         }
 
         const std::string kTermMoveUp = "\x1B[A";
